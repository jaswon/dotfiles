#!/bin/bash

# this script acts as a single source of truth for
# the notification pipe variable. source this script
# to include in other scripts
NOTI_FIFO=/tmp/noti

# return if bar is already running
[[ "$(pidof -x $(basename $0) -o %PPID)" ]] && return

rm -f $NOTI_FIFO # clean up previous fifo
mkfifo $NOTI_FIFO # create new fifo
tail -f /dev/null > $NOTI_FIFO & # keep fifo open

noti () {
	EXITPID= # pid of notification dismiss timer
	while read -r duration content; do # read from fifo
		# kill previous dismiss timer
		kill $EXITPID > /dev/null 2>&1
		# start new dismiss timer
		sleep $duration && echo NOTI_DONE &
		EXITPID=$!
		echo "NOTI$content"
	done < $NOTI_FIFO
}

base () {
	while :; do
		DATE=$(date '+(%a) %b %_d, %Y %I:%M %P')
		BAT_LVL=$(acpi -b | head -n1 | cut -d, -f2 | tail -c+2 )
		BAT_STS=$(acpi -a | cut -d' ' -f3 | cut -d- -f1)
		case $BAT_STS in
			"on") ICON=$(echo -e '\ue041') ;;
			"off") ICON=$(echo -e '\ue032') ;;
		esac
		echo "BASE [ $ICON $BAT_LVL ] [ $DATE ] "
		sleep 5
	done
}

### MODULES ###

# wifi state ( connected / disconnected )
WIFI_DOWN=$(echo -e '\ue217')
WIFI_UP=$(echo -e '\ue21a')
nmcli m | stdbuf -oL grep Networkmanager | stdbuf -oL cut -d\  -f6 |\
while read -r; do
	case $REPLY in
		"'connected'") echo "3 $WIFI_UP $(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)" ;;
		"'disconnected'") echo "3 $WIFI_DOWN Disconnected" ;;
	esac
done > $NOTI_FIFO &

( base & noti ) | while read -r; do
	case $REPLY in
		"BASE"*) BASE="${REPLY#BASE}" ;;
		"NOTI_DONE") NOTI="" ;;
		"NOTI"*) NOTI=" ${REPLY#NOTI} |" ;;
	esac
	echo "$NOTI$BASE"
done
