#!/bin/sh

# this script acts as a single source of truth for
# the notification pipe variable. source this script
# to include in other scripts
NOTI_FIFO=/tmp/noti

# return if bar is already running
[[ "$(pidof -x $(basename $0) -o %PPID)" ]] && return

[[ -e $NOTI_FIFO ]] && rm $NOTI_FIFO # clean up previous fifo
mkfifo $NOTI_FIFO # create new fifo
tail -f /dev/null > $NOTI_FIFO & # keep fifo open

noti () {
	EXITPID= # pid of notification dismiss timer
	while read -r duration content; do # read from fifo
		# if previous dismiss timer exists, stop it
		[[ "$EXITPID" ]] && kill $EXITPID
		# set new dismiss timer
		sleep $duration && echo NOTI_DONE && EXITPID= &
		EXITPID=$!
		echo "NOTI$content"
	done < $NOTI_FIFO
}

base () {
	while :; do
		DATE=$(date '+(%^a) %b %_d, %Y %I:%M %p')
		BAT=$(cat /sys/class/power_supply/BAT0/capacity)
		echo "BASE [ $BAT ] [ $DATE ] "
		sleep 5
	done
}

# checks for changes in wifi state
WIFI_DOWN=$(echo -e '\ue217')
WIFI_UP=$(echo -e '\ue21a')
nmcli m | stdbuf -oL grep Networkmanager | stdbuf -oL cut -d\  -f6 |\
while read -r; do
	case $REPLY in
		"'connected'") echo "3 $WIFI_UP$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)" ;;
		"'disconnected'") echo "3 ${WIFI_DOWN}Disconnected" ;;
	esac
done > $NOTI_FIFO &

( base & noti ) | while read -r; do
	case $REPLY in
		"BASE"*) BASE="${REPLY#BASE}" ;;
		"NOTI_DONE") NOTI="" ;;
		"NOTI"*) NOTI=" ${REPLY#NOTI} |" ;;
	esac
	xsetroot -name "$NOTI$BASE" &> /dev/null
done
